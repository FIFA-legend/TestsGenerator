using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.IO;
using TestsGeneratorLib;

namespace Tests
{
    [TestClass]
    public class GeneratorTests
    {
        private List<SyntaxNode> _roots;

        private List<string> _methodList;

        [TestInitialize]
        public void Setup()
        {
            _methodList = new List<string> {"GetTraceResultTest", "StartTraceTest", "StopTraceTest"};
            
            TestGenerator generator = new TestGenerator();
            List<TestUnit> testFiles = generator.CreateTests(File.ReadAllText("..\\..\\..\\..\\Files\\Tracer.cs"));
            
            _roots = new List<SyntaxNode>();
            foreach (TestUnit testFile in testFiles)
            {
                _roots.Add(CSharpSyntaxTree.ParseText(testFile.SourceCode).GetRoot());
            }
        }

        [TestMethod]
        public void FilesTest()
        {
            Assert.AreEqual(1, _roots.Count, "Wrong amount of test classes is generated");
        }

        [TestMethod]
        public void ClassTest()
        {
            IEnumerable<ClassDeclarationSyntax> classes =
                _roots[0].DescendantNodes().OfType<ClassDeclarationSyntax>().ToList();
            Assert.AreEqual(1, classes.Count(), "Wrong amount of classes");
            
            foreach (ClassDeclarationSyntax classDeclaration in classes)
            {
                Assert.IsTrue(classDeclaration.Modifiers.Any(SyntaxKind.PublicKeyword), "Class is non-public");
                Assert.AreEqual(3, classDeclaration.Members.Count, "Wrong amount of methods in class");
                Assert.AreEqual("TracerClassTest", classDeclaration.Identifier.ValueText,
                    "Class name doesn't equal to expected");
                Assert.AreEqual("[TestClass]", classDeclaration.AttributeLists.ToString(),
                    "Class attribute doesn't equal to expected");
            }
        }

        [TestMethod]
        public void MethodTest()
        {
            IEnumerable<MethodDeclarationSyntax>
                methods = _roots[0].DescendantNodes().OfType<MethodDeclarationSyntax>().ToList();
            Assert.AreEqual(3, methods.Count(), "Amount of methods in class doesn't equal to expected");
            
            foreach (MethodDeclarationSyntax method in methods)
            {
                _methodList.Remove(method.Identifier.ValueText);
                Assert.IsTrue(method.Modifiers.Any(SyntaxKind.PublicKeyword), "Method is non-public");
                Assert.AreEqual("void", method.ReturnType.ToString(), "Method return type is not void");
                Assert.AreEqual("[TestMethod]", method.AttributeLists.ToString(),
                    "Method attribute doesn't equal to expected");
                Assert.AreEqual("Assert.Fail(\"autogenerated\");", method.Body?.Statements.ToString(),
                    "Method body doesn't equal to expected");
            }

            Assert.AreEqual(0, _methodList.Count, "wrong method names");
        }

        [TestMethod]
        public void UsingTest()
        {
            IEnumerable<UsingDirectiveSyntax> imports =
                _roots[0].DescendantNodes().OfType<UsingDirectiveSyntax>().ToList();
            Assert.AreEqual(1, imports.Count(), "Amount of imports doesn't equal to expected");
            
            foreach (UsingDirectiveSyntax usage in imports)
            {
                Assert.AreEqual("Microsoft.VisualStudio.TestTools.UnitTesting", usage.Name.ToString(),
                    "Import name doesn't equal to expected");
            }
        }
    }
}